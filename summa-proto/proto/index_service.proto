syntax = "proto3";
package summa.proto;

import "query.proto";
import "utils.proto";

// Manages indices
service IndexApi {
  // Attaches index to Summa server. Attaching allows to incorporate and start using of downloaded or network indices
  rpc attach_index(AttachIndexRequest) returns (AttachIndexResponse) {}
  // Committing all collected writes to the index
  rpc commit_index (CommitIndexRequest) returns (CommitIndexResponse) {}
  // Creates new index from scratch
  rpc create_index (CreateIndexRequest) returns (CreateIndexResponse) {}
  // Creates new index from scratch
  rpc migrate_index (MigrateIndexRequest) returns (MigrateIndexResponse) {}
  // Deletes single document from the index by its primary key (therefore, index must have primary key)
  rpc delete_documents (DeleteDocumentsRequest) returns (DeleteDocumentsResponse) {}
  // Deletes index and physically removes file in the case of `FileEngine`
  rpc delete_index (DeleteIndexRequest) returns (DeleteIndexResponse) {}
  // Gets all existing index aliases
  rpc get_indices_aliases (GetIndicesAliasesRequest) returns (GetIndicesAliasesResponse) {}
  // Gets index description
  rpc get_index (GetIndexRequest) returns (GetIndexResponse) {}
  // Gets all existing index descriptions
  rpc get_indices (GetIndicesRequest) returns (GetIndicesResponse) {}
  // Adds document to the index in a streaming way
  rpc index_document_stream (stream IndexDocumentStreamRequest) returns (IndexDocumentStreamResponse) {}
  // Adds document to the index
  rpc index_document (IndexDocumentRequest) returns (IndexDocumentResponse) {}
  // Merges multiple segments into a single one. Used for service purposes
  rpc merge_segments (MergeSegmentsRequest) returns (MergeSegmentsResponse) {}
  // Sets or replaces existing index alias
  rpc set_index_alias (SetIndexAliasRequest) returns (SetIndexAliasResponse) {}
  // Removes deletions from all segments
  rpc vacuum_index (VacuumIndexRequest) returns (VacuumIndexResponse) {}
  // Loads all hot parts of the index into the memory
  rpc warmup_index (WarmupIndexRequest) returns (WarmupIndexResponse) {}
}

// Possible primary keys
message PrimaryKey {
  oneof value {
    string str = 1;
    int64 i64 = 2;
  }
}

// Attach file engine request
message AttachFileEngineRequest {}

// Attach remote engine request
message AttachRemoteEngineRequest {}

// Attach file engine request
message AttachIpfsEngineRequest {
  string cid = 1;
}

// Attach index request
message AttachIndexRequest {
 string index_name = 1;
 oneof request {
   AttachFileEngineRequest attach_file_engine_request = 2;
   AttachRemoteEngineRequest attach_remote_engine_request = 3;
   AttachIpfsEngineRequest attach_ipfs_engine_request = 4;
 }
}

// Attach index response
message AttachIndexResponse {
  IndexDescription index = 1;
}

// Commit index request
message CommitIndexRequest {
  string index_alias = 1;
  CommitMode commit_mode = 2;
}

// Commit index response
message CommitIndexResponse {
  // Pure time spent for committing
  optional double elapsed_secs = 2;
}

// Request that changes index engine. Currently possible to convert File to IPFS
message MigrateIndexRequest {
  // Name of index that will be migrated. It will be left intact after migration.
  string source_index_name = 1;
  // Name of index that will be created
  string target_index_name = 2;
  // Target index engine
  CreateIndexEngineRequest target_index_engine = 3;
}

// Response describing migrated index
message MigrateIndexResponse {
  IndexDescription index = 1;
}

message SortByField {
  string field = 1;
  Order order = 2;
}

enum CreateIndexEngineRequest {
  File = 0;
  Memory = 1;
  Ipfs = 2;
}

message IndexAttributes {
  // Timestamp when index has been created
  uint64 created_at = 1;
  // Unique fields of the index. Summa maintains unique constraint on them and uses for deduplicating data
  repeated string unique_fields = 2;
  // Default fields that are using in `MatchQuery`
  repeated string default_fields = 3;
  // Multi fields is ones that may have multiple values and processed as lists. All other fields will be forcefully converted to singular value
  repeated string multi_fields = 4;
  // Descriptive field that may be used as name for index when indices are replicating over wire
  optional string default_index_name = 5;
  // Text index description
  optional string description = 6;
  // (Not-used)
  repeated string default_snippets = 7;
}

// Request for index creation
message CreateIndexRequest {
  // Index name
  string index_name = 1;
  // Index engine
  CreateIndexEngineRequest index_engine = 2;
  // Index schema in Tantivy format
  string schema = 3;
  // Compression for store
  Compression compression = 4;
  // Size of store blocks
  optional uint32 blocksize = 5;
  // Field for sorting
  optional SortByField sort_by_field = 6;
  // Optional index fields
  IndexAttributes index_attributes = 7;
}

message CreateIndexResponse {
  IndexDescription index = 1;
}

message DeleteDocumentsRequest {
  string index_alias = 1;
  Query query = 2;
}

message DeleteDocumentsResponse {
  uint64 deleted_documents = 1;
}

message DeleteIndexRequest {
  string index_name = 1;
}

message DeleteIndexResponse {
  string index_name = 1;
}

message GetIndicesAliasesRequest {}

message GetIndicesAliasesResponse {
  map<string, string> indices_aliases = 1;
}

message GetIndexRequest {
  string index_alias = 1;
}

message GetIndexResponse {
  IndexDescription index = 1;
}

message GetIndicesRequest {}

message GetIndicesResponse {
  repeated IndexDescription indices = 1;
}

message IndexDocumentStreamRequest {
  string index_alias = 1;
  repeated bytes documents = 2;
}

message IndexDocumentStreamResponse {
  uint64 success_docs = 1;
  uint64 failed_docs = 2;
  double elapsed_secs = 3;
}

message IndexDocumentRequest {
  string index_alias = 1;
  bytes document = 2;
}

message IndexDocumentResponse {}

message MergeSegmentsRequest {
  string index_alias = 1;
  repeated string segment_ids = 2;
}

message MergeSegmentsResponse {}

message SetIndexAliasRequest {
  string index_alias = 1;
  string index_name = 2;
}

message SetIndexAliasResponse {
  // If set, equals to the previous alias of the index
  optional string old_index_name = 1;
}

message VacuumIndexRequest {
  string index_alias = 1;
}

message VacuumIndexResponse {}

message WarmupIndexRequest {
  string index_alias = 1;
  // If set to false, only term dictionaries will be warmed, otherwise the entire index will be read.
  bool is_full = 2;
}

message WarmupIndexResponse {
  // Time spent in warming operation
  double elapsed_secs = 1;
}

// Compression library for store, implies on both performance and occupied disk space
enum Compression {
  None = 0;
  Brotli = 1;
  Lz4 = 2;
  Snappy = 3;
  Zstd = 4;
}

message FileEngineConfig {
  string path = 1;
}
message MemoryEngineConfig {
  string schema = 1;
}
message ChunkedCacheConfig {
  uint64 chunk_size = 1;
  optional uint64 cache_size = 2;
}
message RemoteEngineConfig {
  string method = 1;
  string url_template = 2;
  map<string, string> headers_template = 3;
  ChunkedCacheConfig chunked_cache_config = 4;
}
message IpfsEngineConfig {
  string cid = 1;
  ChunkedCacheConfig chunked_cache_config = 2;
  string path = 3;
}

message IndexEngineConfig {
  oneof config {
    FileEngineConfig file = 1;
    MemoryEngineConfig memory = 2;
    RemoteEngineConfig remote = 3;
    IpfsEngineConfig ipfs = 4;
  }
}

message IndexDescription {
  string index_name = 1;
  repeated string index_aliases = 2;
  IndexEngineConfig index_engine = 3;
  uint64 num_docs = 4;
  Compression compression = 5;
}

message IndexDocumentOperation {
  bytes document = 1;
}

message IndexOperation {
 oneof operation {
   IndexDocumentOperation index_document = 2;
 }
}

// Commit mode
enum CommitMode {
  // Returns immediately and then commits in the background
  Async = 0;
  // Waits until the end of commit
  Sync = 1;
}