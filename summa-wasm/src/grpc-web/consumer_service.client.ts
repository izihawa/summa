// @generated by protobuf-ts 2.9.1 with parameter use_proto_field_name
// @generated from protobuf file "consumer_service.proto" (package "summa.proto", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ConsumerApi } from "./consumer_service";
import type { DeleteConsumerResponse } from "./consumer_service";
import type { DeleteConsumerRequest } from "./consumer_service";
import type { GetConsumersResponse } from "./consumer_service";
import type { GetConsumersRequest } from "./consumer_service";
import type { GetConsumerResponse } from "./consumer_service";
import type { GetConsumerRequest } from "./consumer_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateConsumerResponse } from "./consumer_service";
import type { CreateConsumerRequest } from "./consumer_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Manage ingestion data from Kafka
 *
 * @generated from protobuf service summa.proto.ConsumerApi
 */
export interface IConsumerApiClient {
    /**
     * Create a new consumer
     *
     * @generated from protobuf rpc: create_consumer(summa.proto.CreateConsumerRequest) returns (summa.proto.CreateConsumerResponse);
     */
    createConsumer(input: CreateConsumerRequest, options?: RpcOptions): UnaryCall<CreateConsumerRequest, CreateConsumerResponse>;
    /**
     * Get a single consumer
     *
     * @generated from protobuf rpc: get_consumer(summa.proto.GetConsumerRequest) returns (summa.proto.GetConsumerResponse);
     */
    getConsumer(input: GetConsumerRequest, options?: RpcOptions): UnaryCall<GetConsumerRequest, GetConsumerResponse>;
    /**
     * Get a list of all consumers
     *
     * @generated from protobuf rpc: get_consumers(summa.proto.GetConsumersRequest) returns (summa.proto.GetConsumersResponse);
     */
    getConsumers(input: GetConsumersRequest, options?: RpcOptions): UnaryCall<GetConsumersRequest, GetConsumersResponse>;
    /**
     * Remove a consumer
     *
     * @generated from protobuf rpc: delete_consumer(summa.proto.DeleteConsumerRequest) returns (summa.proto.DeleteConsumerResponse);
     */
    deleteConsumer(input: DeleteConsumerRequest, options?: RpcOptions): UnaryCall<DeleteConsumerRequest, DeleteConsumerResponse>;
}
/**
 * Manage ingestion data from Kafka
 *
 * @generated from protobuf service summa.proto.ConsumerApi
 */
export class ConsumerApiClient implements IConsumerApiClient, ServiceInfo {
    typeName = ConsumerApi.typeName;
    methods = ConsumerApi.methods;
    options = ConsumerApi.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Create a new consumer
     *
     * @generated from protobuf rpc: create_consumer(summa.proto.CreateConsumerRequest) returns (summa.proto.CreateConsumerResponse);
     */
    createConsumer(input: CreateConsumerRequest, options?: RpcOptions): UnaryCall<CreateConsumerRequest, CreateConsumerResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateConsumerRequest, CreateConsumerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get a single consumer
     *
     * @generated from protobuf rpc: get_consumer(summa.proto.GetConsumerRequest) returns (summa.proto.GetConsumerResponse);
     */
    getConsumer(input: GetConsumerRequest, options?: RpcOptions): UnaryCall<GetConsumerRequest, GetConsumerResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetConsumerRequest, GetConsumerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get a list of all consumers
     *
     * @generated from protobuf rpc: get_consumers(summa.proto.GetConsumersRequest) returns (summa.proto.GetConsumersResponse);
     */
    getConsumers(input: GetConsumersRequest, options?: RpcOptions): UnaryCall<GetConsumersRequest, GetConsumersResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetConsumersRequest, GetConsumersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Remove a consumer
     *
     * @generated from protobuf rpc: delete_consumer(summa.proto.DeleteConsumerRequest) returns (summa.proto.DeleteConsumerResponse);
     */
    deleteConsumer(input: DeleteConsumerRequest, options?: RpcOptions): UnaryCall<DeleteConsumerRequest, DeleteConsumerResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteConsumerRequest, DeleteConsumerResponse>("unary", this._transport, method, opt, input);
    }
}
