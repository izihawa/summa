// @generated by protobuf-ts 2.9.1 with parameter use_proto_field_name
// @generated from protobuf file "reflection_service.proto" (package "summa.proto", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ReflectionApi } from "./reflection_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetTopTermsResponse } from "./reflection_service";
import type { GetTopTermsRequest } from "./reflection_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Analyzes indices
 *
 * @generated from protobuf service summa.proto.ReflectionApi
 */
export interface IReflectionApiClient {
    /**
     * @generated from protobuf rpc: get_top_terms(summa.proto.GetTopTermsRequest) returns (summa.proto.GetTopTermsResponse);
     */
    getTopTerms(input: GetTopTermsRequest, options?: RpcOptions): UnaryCall<GetTopTermsRequest, GetTopTermsResponse>;
}
/**
 * Analyzes indices
 *
 * @generated from protobuf service summa.proto.ReflectionApi
 */
export class ReflectionApiClient implements IReflectionApiClient, ServiceInfo {
    typeName = ReflectionApi.typeName;
    methods = ReflectionApi.methods;
    options = ReflectionApi.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: get_top_terms(summa.proto.GetTopTermsRequest) returns (summa.proto.GetTopTermsResponse);
     */
    getTopTerms(input: GetTopTermsRequest, options?: RpcOptions): UnaryCall<GetTopTermsRequest, GetTopTermsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTopTermsRequest, GetTopTermsResponse>("unary", this._transport, method, opt, input);
    }
}
