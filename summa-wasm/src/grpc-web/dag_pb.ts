// @generated by protobuf-ts 2.9.1 with parameter long_type_string,use_proto_field_name
// @generated from protobuf file "dag_pb.proto" (package "dag_pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message dag_pb.PBLink
 */
export interface PBLink {
    /**
     * binary CID (with no multibase prefix) of the target object
     *
     * @generated from protobuf field: optional bytes hash = 1;
     */
    hash?: Uint8Array;
    /**
     * UTF-8 string name
     *
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * cumulative size of target object
     *
     * @generated from protobuf field: optional uint64 t_size = 3;
     */
    t_size?: string;
}
/**
 * @generated from protobuf message dag_pb.PBNode
 */
export interface PBNode {
    /**
     * refs to other objects
     *
     * @generated from protobuf field: repeated dag_pb.PBLink links = 2;
     */
    links: PBLink[];
    /**
     * opaque user data
     *
     * @generated from protobuf field: optional bytes data = 1;
     */
    data?: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class PBLink$Type extends MessageType<PBLink> {
    constructor() {
        super("dag_pb.PBLink", [
            { no: 1, name: "hash", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "t_size", kind: "scalar", localName: "t_size", opt: true, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<PBLink>): PBLink {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBLink>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBLink): PBLink {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes hash */ 1:
                    message.hash = reader.bytes();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional uint64 t_size */ 3:
                    message.t_size = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBLink, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes hash = 1; */
        if (message.hash !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.hash);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional uint64 t_size = 3; */
        if (message.t_size !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.t_size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dag_pb.PBLink
 */
export const PBLink = new PBLink$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBNode$Type extends MessageType<PBNode> {
    constructor() {
        super("dag_pb.PBNode", [
            { no: 2, name: "links", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PBLink },
            { no: 1, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PBNode>): PBNode {
        const message = { links: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBNode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBNode): PBNode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated dag_pb.PBLink links */ 2:
                    message.links.push(PBLink.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBNode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated dag_pb.PBLink links = 2; */
        for (let i = 0; i < message.links.length; i++)
            PBLink.internalBinaryWrite(message.links[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bytes data = 1; */
        if (message.data !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dag_pb.PBNode
 */
export const PBNode = new PBNode$Type();
