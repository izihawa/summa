// @generated by protobuf-ts 2.9.1 with parameter use_proto_field_name
// @generated from protobuf file "unixfs.proto" (package "unixfs", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message unixfs.Data
 */
export interface Data {
    /**
     * @generated from protobuf field: unixfs.Data.DataType type = 1;
     */
    type: Data_DataType;
    /**
     * @generated from protobuf field: optional bytes data = 2;
     */
    data?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint64 filesize = 3;
     */
    filesize?: bigint;
    /**
     * @generated from protobuf field: repeated uint64 blocksizes = 4;
     */
    blocksizes: bigint[];
    /**
     * @generated from protobuf field: optional uint64 hashType = 5;
     */
    hashType?: bigint;
    /**
     * @generated from protobuf field: optional uint64 fanout = 6;
     */
    fanout?: bigint;
}
/**
 * @generated from protobuf enum unixfs.Data.DataType
 */
export enum Data_DataType {
    /**
     * @generated from protobuf enum value: Raw = 0;
     */
    Raw = 0,
    /**
     * @generated from protobuf enum value: Directory = 1;
     */
    Directory = 1,
    /**
     * @generated from protobuf enum value: File = 2;
     */
    File = 2,
    /**
     * @generated from protobuf enum value: Metadata = 3;
     */
    Metadata = 3,
    /**
     * @generated from protobuf enum value: Symlink = 4;
     */
    Symlink = 4,
    /**
     * @generated from protobuf enum value: HAMTShard = 5;
     */
    HAMTShard = 5
}
/**
 * @generated from protobuf message unixfs.Metadata
 */
export interface Metadata {
    /**
     * @generated from protobuf field: optional string MimeType = 1 [json_name = "MimeType"];
     */
    MimeType?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Data$Type extends MessageType<Data> {
    constructor() {
        super("unixfs.Data", [
            { no: 1, name: "type", kind: "enum", T: () => ["unixfs.Data.DataType", Data_DataType] },
            { no: 2, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "filesize", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "blocksizes", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "hashType", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "fanout", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Data>): Data {
        const message = { type: 0, blocksizes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Data): Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* unixfs.Data.DataType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                case /* optional uint64 filesize */ 3:
                    message.filesize = reader.uint64().toBigInt();
                    break;
                case /* repeated uint64 blocksizes */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.blocksizes.push(reader.uint64().toBigInt());
                    else
                        message.blocksizes.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint64 hashType */ 5:
                    message.hashType = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 fanout */ 6:
                    message.fanout = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* unixfs.Data.DataType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional bytes data = 2; */
        if (message.data !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        /* optional uint64 filesize = 3; */
        if (message.filesize !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.filesize);
        /* repeated uint64 blocksizes = 4; */
        if (message.blocksizes.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.blocksizes.length; i++)
                writer.uint64(message.blocksizes[i]);
            writer.join();
        }
        /* optional uint64 hashType = 5; */
        if (message.hashType !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.hashType);
        /* optional uint64 fanout = 6; */
        if (message.fanout !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.fanout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message unixfs.Data
 */
export const Data = new Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Metadata$Type extends MessageType<Metadata> {
    constructor() {
        super("unixfs.Metadata", [
            { no: 1, name: "MimeType", kind: "scalar", localName: "MimeType", jsonName: "MimeType", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Metadata>): Metadata {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metadata): Metadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string MimeType = 1 [json_name = "MimeType"];*/ 1:
                    message.MimeType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string MimeType = 1 [json_name = "MimeType"]; */
        if (message.MimeType !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.MimeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message unixfs.Metadata
 */
export const Metadata = new Metadata$Type();
